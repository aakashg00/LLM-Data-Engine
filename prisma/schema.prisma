// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]  @relation("UserProjects")
  Messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// models for data engine:

enum Annotation {
  EDIT
  TAG
  BOTH
}

model Project {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  name          String
  description   String

  instructions  String     @default("No instructions provided.")
  annotation    Annotation @default(EDIT)

  conversations Conversation[]

  systemPrompts SystemPrompt[]

  tags          Tag[]

  users         User[]      @relation("UserProjects")

  allowedEmails AllowedEmail[]
  accessType    AccessType @default(EMAIL_ONLY)

  // Langfuse
  publicKey     String      /// @encrypted
  secretKey     String      /// @encrypted
}

enum AccessType {
  ANYONE
  EMAIL_ONLY
}

model AllowedEmail {
  id        String   @id @default(cuid())
  email     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([email, projectId])
}

model SystemPrompt {
  id      String   @id @default(cuid())
  title   String
  body    String

  project Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Tag {
  id       String    @id @default(cuid())
  name     String
  color    String
  projects Project[]
}

model Conversation {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  messages   Message[]
  fiveRegens Boolean   @default(false)
  project    Project   @relation(fields: [projectId], references: [id])
  projectId  String
}

enum LLM_Model {
  GPT_4
  GPT_3p5
  Claude_3_Haiku
  Claude_3_Sonnet
  Claude_3_Opus
}

model Message {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  role           String
  
  // If the message is written by human
  authorId       String?
  author         User?         @relation(fields: [authorId], references: [id])
  // If the message is written by LLM
  authorModel    LLM_Model? // Which model generated this message

  content        String
  tags           Json?
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  responses      AI_Response[]
}

// AI_Response is a response generated by an AI model
// For a user message, multiple AI_Response can be generated. And human annotator 
// can select one of them as the preferred response.
model AI_Response {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())

  authorModel  LLM_Model? // Which model generated this message

  content      String

  message      Message @relation(fields: [messageId], references: [id])
  messageId    String

  isSelected   Boolean
  feedback     String?
}
